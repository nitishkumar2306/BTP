cds compile srv/cat-service.cds --to xsuaa > xs-security.json
"generatedefault:default-env": "cf curl \"/v2/apps/$(cf app --guid SalesAndInventoryManagement-srv)/env\" | npx node-jq -r '.system_env_json' > default-env.json"
npm run SalesAndInventoryManagement:default-env
cds watch --profile hybrid
cds bind --exec -- npm start --prefix app/router
cf update-service SalesAndInventoryManagement-auth -c xs-security.json
cf create-service-key MyHANAApp-auth default  
cds bind -2 MyHANAApp-auth:default
=====xs-app.json=====
{
  "authenticationMethod": "route",
  "logout": {
    "logoutEndpoint": "/app-logout",
    "logoutPage": "/"
  },
  "routes": [
    {
      "source": "^/app/(.*)$",
      "target": "$1",
      "localDir": ".",
      "cacheControl": "no-cache, no-store, must-revalidate"
    },
    {
      "source": "^/appconfig/",
      "localDir": ".",
      "cacheControl": "no-cache, no-store, must-revalidate"
    },
    {
      "source": "^/(.*)$",
      "target": "$1",
      "destination": "srv-api",
      "csrfProtection": true
    },
    {
      "source": "^/user-api(.*)",
      "target": "$1",
      "service": "sap-approuter-userapi"
    }
  ]
}

=====xs-security.json======
{
  "xsappname": "SalesAndInventoryManagement-auth",
  "tenant-mode": "dedicated",
  "scopes": [
    {
      "name": "$XSAPPNAME.SalesReps",
      "description": "SalesReps"
    },
    {
      "name": "$XSAPPNAME.Admin",
      "description": "Admin"
    },
    {
      "name": "$XSAPPNAME.InventoryManager",
      "description": "InventoryManager"
    }
  ],
  "attributes": [],
  "role-templates": [
    {
      "name": "SalesReps",
      "description": "generated",
      "scope-references": [
        "$XSAPPNAME.SalesReps"
      ],
      "attribute-references": []
    },
    {
      "name": "Admin",
      "description": "generated",
      "scope-references": [
        "$XSAPPNAME.Admin"
      ],
      "attribute-references": []
    },
    {
      "name": "InventoryManager",
      "description": "generated",
      "scope-references": [
        "$XSAPPNAME.InventoryManager"
      ],
      "attribute-references": []
    }
  ],
  "oauth2-configuration": {
    "credential-types": [
      "binding-secret",
      "x509"
    ],
    "redirect-uris": [
      "https://*.applicationstudio.cloud.sap/**"
    ]
  }
}

========package.json=========
{
  "name": "SalesAndInventoryManagement",
  "version": "1.0.0",
  "description": "A simple CAP project.",
  "repository": "<Add your repository here>",
  "license": "UNLICENSED",
  "private": true,
  "dependencies": {
    "@cap-js/hana": "^1",
    "@sap-cloud-sdk/http-client": "^3.22.2",
    "@sap-cloud-sdk/resilience": "^3.22.2",
    "@sap/approuter": "^17.0.0",
    "@sap/cds": "^8.4.0",
    "@sap/cds-common-content": "^2.1.0",
    "@sap/hana-client": "^2.22.32",
    "@sap/xssec": "^4",
    "approuter": "file:app/router",
    "express": "^4"
  },
  "devDependencies": {
    "@cap-js/cds-types": "^0.6",
    "@sap/cds-dk": "^8.4.1"
  },
  "scripts": {
    "start": "cds-serve"
  },
  "cds": {
    "requires": {
      "auth": "xsuaa",
      "connectivity": true,
      "destinations": true,
      "northwindAPI": {
        "kind": "rest",
        "credentials": {
          "destination": "Northwind"
        }
      }
    },
    "sql": {
      "native_hana_associations": false
    }
  }
}
-------------------------------
    this.on('updateInventoryAfterOrderPlacement', async (req) => {
        const { orderId, productId, quantity } = req.data;

        try {
            const stockAvailable = await SELECT.from('CatalogService_Products')
                .where({ ProductID: productId })
                .columns(['UnitsInStock']);

            // console.log('=======stockAvailable: ',stockAvailable);

            if (stockAvailable.length != 0) {
                const unitsRemaining = stockAvailable[0].UNITSINSTOCK;

                if (unitsRemaining > 0 && unitsRemaining > quantity) {
                    await UPDATE('CatalogService_Products')
                        .where({ ProductID: productId })
                        .set({ UnitsInStock: { '-=': quantity } });

                    return "Successfully updated the stock";
                } else {
                    return "Sorry, stock not Available to meet the Order requirements";
                }
            } else {
                return `No Product found with Id ${productId}`;
            }

        } catch (error) {
            console.log('Found some error: ', error);
            req.error(500, `Error updating the stock level: ${error.message}`);
        }

    })
===================
namespace SalesInventoryManagement;
using { cuid } from '@sap/cds/common';


type OrderStatus : String enum{
    Pending;
    Shipped;
    Delivered;
    Cancelled;
    Returned;

}

entity Customers {
    key CustomerID   : String(5);
        CompanyName  : String(40);
        ContactName  : String(30);
        ContactTitle : String(30);
        Address      : String(60);
        City         : String(15);
        Region       : String(25);
        PostalCode   : String(10);
        Country      : String(15);
        Phone        : String(24);
        Fax          : String(24);

        // Association to Orders
        Orders       : Association to many Orders
                           on Orders.CustomerID = $self.CustomerID;
}

entity Orders  {
    key OrderID        : Integer;
        CustomerID     : String(5); // Foreign Key to Customers
        EmployeeID     : Integer; // Foreign Key to Employees (not created here but can be added if needed)
        OrderDate      : Date;
        DeliveredDate  : Date;
        ShippedDate    : Date;
        Freight        : Decimal(10, 2);
        ShipName       : String(40);
        ShipAddress    : String(60);
        ShipCity       : String(15);
        ShipRegion     : String(15);
        ShipPostalCode : String(10);
        OrderStatus  : OrderStatus;

        // Association to OrderDetails
        OrderDetails   : Association to many OrderDetails
                             on OrderDetails.OrderID = $self.OrderID;
}

entity OrderDetails {
    key OrderID   : Integer;
    key ProductID : Integer;
        UnitPrice : Decimal(10, 2);
        Quantity  : Integer;
        Discount  : Decimal(3, 2);

        // Association to Products
        Product   : Association to Products
                        on Product.ProductID = $self.ProductID;
}

entity Products {
    key ProductID       : Integer;
        ProductName     : String(40);
        SupplierID      : Integer; // Foreign Key to Suppliers
        CategoryID      : Integer; // Foreign Key to Categories
        QuantityPerUnit : String(20);
        UnitPrice       : Decimal(10, 2);
        UnitsInStock    : Integer;
        UnitsOnOrder    : Integer;
        ReorderLevel    : Integer;
        Discontinued    : Boolean;

        // Association to Suppliers
        Supplier        : Association to Suppliers
                              on Supplier.SupplierID = $self.SupplierID;
}

entity Suppliers {
    key SupplierID   : Integer;
        CompanyName  : String(40);
        ContactName  : String(30);
        ContactTitle : String(30);
        Address      : String(60);
        City         : String(15);
        Region       : String(15);
        PostalCode   : String(10);
        Country      : String(15);
        Phone        : String(24);
        Fax          : String(24);

        // Association to Products
        Products     : Association to many Products
                           on Products.SupplierID = $self.SupplierID;
}
